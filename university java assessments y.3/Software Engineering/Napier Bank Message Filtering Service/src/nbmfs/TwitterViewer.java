/*
 * Created by student id: 40270585, using javafx to build the creator menu scene
 * version 1: 06/11/2016
 * This is twitter viewer for the bank filtering service
 */
package nbmfs;

import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class TwitterViewer extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	private ArrayList<String> idArrayList = new ArrayList<>();
	private ArrayList<String> headerArrayList = new ArrayList<>();
	private ArrayList<String> dataArrayList = new ArrayList<>();
	private ArrayList<String> mentionsArrayList = new ArrayList<>();
	private ArrayList<String> hashtagsArrayList = new ArrayList<>();
	private Map<String, Integer> mentions = new HashMap<>();
	private Map<String, Integer> hashtags = new HashMap<>();
	/**
     * Creates new form NewJFrame
     */
    public TwitterViewer() {
        initComponents();
        twitterDatabaseReader();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
	@SuppressWarnings("unchecked")
	public void twitterDatabaseReader()
	{
		JSONParser parser = new JSONParser();
		 
        try {
        	
            Object obj = parser.parse(new FileReader("TwitterDatabase.txt"));
            
            JSONObject jsonObject = (JSONObject) obj;
           
            JSONArray idList = (JSONArray) jsonObject.get("id");
            JSONArray headerList = (JSONArray) jsonObject.get("header");
            JSONArray dataList = (JSONArray) jsonObject.get("data");
            JSONArray mentionsList = (JSONArray) jsonObject.get("mentions");
            JSONArray hashtagsList = (JSONArray) jsonObject.get("hashtags");
            
            idArrayList.addAll(idList);
            headerArrayList.addAll(headerList);
            dataArrayList.addAll(dataList);
            mentionsArrayList.addAll(mentionsList);
            hashtagsArrayList.addAll(hashtagsList);
            
        }
        
        catch (Exception e) 
        {
            e.printStackTrace();
        }
        
        //show id and phone number:
        for(int i = 0; i<idArrayList.size(); i++)
        {
        	String id_author = i+"."+" id: "+idArrayList.get(i)+" author: "+headerArrayList.get(i);
        	jTextArea1.append(id_author+"\n");
        }
        //show id and text data:
        for(int i = 0; i<idArrayList.size(); i++)
        {
        	String data =i+"."+"id: "+idArrayList.get(i)+" data: "+dataArrayList.get(i);
        	jTextArea2.append(data+"\n");
        }  
        //sort the names on the list to prepare for counting them:
        mentionsArrayList.sort(String::compareToIgnoreCase);
        hashtagsArrayList.sort(String::compareToIgnoreCase);
        
        if(!mentionsArrayList.isEmpty())
        {
	        //add all elements from the mentions list to the hashmap
	        for (int j = 0; j < mentionsArrayList.size(); j++) 
	        {
	        	addElementToMentions(mentionsArrayList.get(j));
			} 
	        
	        //print mentions list on screen:
	        for (Map.Entry<String,Integer> mentions : mentions.entrySet()) 
	        {
	        	  String key = mentions.getKey();
	        	  Integer value = mentions.getValue();
	        	  String valuePrint = value.toString();
	        	  
	        	  String printable =key+" occured: "+valuePrint;
	        	  jTextArea4.append(printable+"\n");
	        }	         
        } 
        
        if(!hashtagsArrayList.isEmpty())
        {
	        //add all elements from the mentions list to the hashmap
	        for (int j = 0; j < hashtagsArrayList.size(); j++) 
	        {
	        	addElementToHashtags(hashtagsArrayList.get(j));
			} 
	        //print hashtags list on screen:
	        for (Map.Entry<String,Integer> hashtags : hashtags.entrySet()) 
	        {
	        	  String key = hashtags.getKey();
	        	  Integer value = hashtags.getValue();
	        	  String valuePrint = value.toString();
	        	  
	        	  String printable =key+" occured: "+valuePrint;
	        	  jTextArea5.append(printable+"\n"); 	  
	        }      
        } 
	}
        
        
    
	//add element to mentions hashmap    
    private void addElementToMentions(String key)
    {
    	int number = countElementsMentions(key);
    	mentions.put(key, number+1);
    }
    
	//add element to hashtags hashmap    
    private void addElementToHashtags(String key)
    {
    	int number = countElementsHashtags(key);
    	hashtags.put(key, number+1);
    }
    
    //count elements of mentions hashmap    
    private int countElementsMentions(String key)
    {
    	int counter = 0;
    	
    	if(!mentions.isEmpty() && mentions.containsKey(key))
    	{
    		counter = mentions.get(key);
    	}
    	//otherwise returns no occurrence
    	return counter;
    }
    
    //count elements of hashtags hashmap    
    private int countElementsHashtags(String key)
    {
    	int counter = 0;
    	
    	if(!hashtags.isEmpty() && hashtags.containsKey(key))
    	{
    		counter = hashtags.get(key);
    	}
    	//otherwise returns no occurrence
    	return counter;
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setText("Welcome to the Napier Bank Message Filtering Service");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Twitter message viewer:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEditable(false);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setEditable(false);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("ID & data:");

        jLabel2.setText("ID & author:");

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jTextArea4.setEditable(false);
        jScrollPane4.setViewportView(jTextArea4);

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jTextArea5.setEditable(false);
        jScrollPane5.setViewportView(jTextArea5);

        jLabel4.setText("Trending list:");

        jLabel5.setText("Mentions list:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(jScrollPane5)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void run_viewer() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TwitterViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TwitterViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TwitterViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TwitterViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TwitterViewer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    // End of variables declaration                   
}
